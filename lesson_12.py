# -*- coding: utf-8 -*-
"""Lesson 12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQ4DgI-4q-ShPer0s852Un2BzzokSnc8

# OOP example
"""

from dataclasses import dataclass

@dataclass
class Dish:
    name:str
    price:int

class Menu(dict):
    def print_me(self):
        print(self)

menu = Menu()
def read_dish():
    name= input('name? ')
    while True:
        try:
            price=int(input('name? '))
            break
        except ValueError:
            continue
    return Dish(name, price)

while True:
    print('1) add dish')
    print('2) delete dish')
    ans = input('what do you want to do? ')
    if ans not in ['1', '2']:
        continue

    if ans == '1':
        dish = read_dish()
        menu[dish.name] = dish
        menu.print_me()



"""# Project

- lesson 15 pushed to 6/12
- project will be submitted in lesson 16 (10/12)
- in a colab notebook
  - if you MUST not use colab (for instance, building a server, or a game), you must submit it as a github project (will teach about it next lesson)
- remember Hofstatder law: "It always takes more time than you thought, even after taking Hofstater's into consideration"
- points
  1. finishing!
  2. code quality (names of variables, how nice are the loops, proper use of classes, [pep8](https://gist.github.com/RichardBronosky/454964087739a449da04) 
  3. size of the task - impressiveness
  4. teacher's discretion
"""



"""# regex"""

print("c:\newfolder\timmy.txt")

print(r"c:\newfolder\timmy.txt")

# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"(\d\d)([/\-\.])(\d\d)\2(\d{4})"

test_str = ("31.12.2021\n"
	"31-12-2021\n\n"
	"31-12/2021\n"
	"31.12/2012\n\n"
	"(\\d\\d)/(\\d\\d)/(\\d{4})\n"
	"31/12/2021\n"
	"3/12/2021\n\n"
	"\\b(([1-9][0-9]*|0)(\\.\\d+)?)\\b\n"
	"3.0\n"
	"3.14\n"
	"0.1234\n"
	"0.0000000000000000000000000000000123\n"
	"3\n"
	"23\n"
	"123\n"
	"0.0000000000000000000\n\n"
	"0000000000000\n"
	"0000000123123213\n"
	"10 20 30\n\n"
	"[\\+\\-]?\\d+\n"
	"10\n"
	"-10\n"
	"--10\n"
	"+10\n\n\n"
	"one.*please\n"
	"one beer bottle34543252 #$%#@$%@#$%@#4 23454354534 please\n\n"
	"\\b(([1-9]\\d*)|0)\\b\n"
	"1\n"
	"10\n"
	"123123321\n"
	"0\n"
	"0123\n"
	"0000000000000345\n"
	"0000000000\n"
	"0\n\n"
	"0 10 101 200 000 0123\n\n\n\n"
	"catdogdogdog cat\n"
	"my cat is wonderful, but my doggggggggggggggggggggg dogdogdogis amazing\n\n"
	"31 10 2011\n"
	"\\d{9}\n"
	"[0-9]{9}\n"
	"123456789354253452435243543\n"
	"34543\n"
	"123456789012345667\n"
	"12345678901234557\n\n\n"
	"[a-zA-Z_]+[a-zA-Z_0-9]*\n"
	"class CellularPhone:\n"
	"    pass\n\n"
	"phone = CellularPhone()\n"
	"x = 10\n"
	"x1 = 10\n"
	"x2 = 20\n\n"
	"10x\n\n"
	"[A-Z][a-z]+\n"
	"look at the ball, Vincent, isnt it lovely and red\n\n"
	"one [a-z]+ please\n"
	"one ball please , one  bal oon fgsdfg dsfgd sdg dg dfsg dsfg  please\n\n"
	"[a-z]+ing\n"
	"climbing diving skiing coding blabing dog 1running\n"
	"ringeringingingignging fgsfgingfgdfdg ")

matches = re.finditer(regex, test_str, re.MULTILINE)

for matchNum, match in enumerate(matches, start=1):
    
    print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))
    
    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.

for day, _, month, year in re.findall(regex, test_str):
    print (year, month, day)

